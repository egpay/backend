<?phpnamespace App\Modules\System;use App\Http\Requests\transferMoneyMainWalletsFormRequest;use App\Libs\LoyaltyWalletData;use App\Libs\WalletData;use App\Models\LoyaltyWallet;use App\Models\MainWallets;use App\Models\Staff;use App\Models\User;use App\Models\Wallet;use App\Models\WalletTransaction;use Illuminate\Http\Request;use Illuminate\Support\Facades\Auth;use Illuminate\Support\Facades\DB;use League\Flysystem\Config;use Spatie\Activitylog\Models\Activity;use Yajra\Datatables\Facades\Datatables;use Illuminate\Support\Facades\Gate;use Form;use Spatie\Permission\Models\Role;use Spatie\Permission\Models\Permission;use App\Http\Requests\UserFormRequest;use App\Http\Requests\transferMoneySupervisorFormRequest;use App\Http\Requests\transferMoneyStaffFormRequest;class LoyaltyWalletController extends SystemController{    public function __construct(){        parent::__construct();        $this->viewData['breadcrumb'] = [            [                'text'=> __('Home'),                'url'=> url('system'),            ]        ];    }    public function index(Request $request){        if($request->isDataTable){            $eloquentData = LoyaltyWallet::with('walletowner');            if($request->withTrashed){                $eloquentData->onlyTrashed();            }            /*             * Start handling filter             */            whereBetween($eloquentData,'created_at',$request->created_at1,$request->created_at2);            if($request->id){                $eloquentData->where('id', '=',$request->id);            }            if($request->walletowner_type){                $eloquentData->where('walletowner_type',WalletData::getWalletOwnerTypeModel($request->walletowner_type));            }            if($request->walletowner_id){                $eloquentData->where('walletowner_id',$request->walletowner_id);            }            if($request->balance){                whereBetween($eloquentData,'balance',$request->balance1,$request->balance2);            }            $systemLang = $this->systemLang;            return Datatables::eloquent($eloquentData)                ->addColumn('id','{{$id}}')                ->addColumn('walletowner_type',function($data){                    $Model = explode('\\',$data->walletowner_type);                    return ucwords(str_replace('_', ' ', end($Model)));                })                ->addColumn('walletowner_id', function($data) use($systemLang){                    return getWalletOwnerName($data,$systemLang);                })                ->addColumn('balance','{{$balance}} {{__("LE")}}')                ->addColumn('updated_at',function($data){                    if(empty($data->updated_at)){                        return '--';                    }                    return $data->updated_at->diffForHumans();                })                ->addColumn('action',function($data){                    return "<button class=\"btn btn-primary\" type=\"button\" onclick='location = \"".route('system.loyalty-wallet.show',$data->id)."\"'><i class=\"ft-eye\"></i></button>";                })                ->make(true);        }else{            // View Data            $this->viewData['tableColumns'] = [                __('ID'),                __('Owner Type'),                __('Owner'),                __('Balance'),                __('Last Update'),                __('Action')            ];            $this->viewData['breadcrumb'][] = [                'text'=> __('Loyalty Wallets')            ];            $this->viewData['pageTitle'] = __('Loyalty Wallets');            $this->viewData['walletUserType'] = LoyaltyWalletData::$userType;            return $this->view('loyalty-wallet.index',$this->viewData);        }    }    /**     * Display the specified resource.     *     * @return \Illuminate\Http\Response     */    public function show($ID,Request $request){        $wallet = LoyaltyWallet::findOrFail($ID);        if($request->isDataTable){            $eloquentData = $wallet->allTransaction();            if($request->withTrashed){                $eloquentData->onlyTrashed();            }            /*             * Start handling filter             */            whereBetween($eloquentData,'created_at',$request->created_at1,$request->created_at2);            if($request->id){                $eloquentData->where('id', '=',$request->id);            }            if($request->model_type){                $eloquentData->where('model_type',WalletData::getModelTypeByModel($request->model_type));            }            if($request->model_id){                $eloquentData->where('model_id',$request->model_id);            }            if($request->type){                $eloquentData->where('type',$request->type);            }            if($request->status){                $eloquentData->where('status',$request->status);            }            if($request->amount){                whereBetween($eloquentData,'amount',$request->amount1,$request->amount2);            }            $systemLang = $this->systemLang;            return Datatables::eloquent($eloquentData)                ->addColumn('details',function($data){                    return ' ';                })                ->addColumn('id','{{$id}}')                ->addColumn('model_id',function($data){                    if(!$data->model){                        return '--';                    }else{                        return LoyaltyWalletData::getModelTypeByModel($data->model_type) . ' ('.$data->model_id.') ';                    }                })                ->addColumn('amount',function($data){                    return number_format($data->amount).' '.__('LE');                })                ->addColumn('created_at',function($data){                    return $data->created_at->diffForHumans();                })                ->addColumn('type', function($data){                    return __($data->type);                })                ->addColumn('status', function($data){                    return __($data->status);                })                ->addColumn('action',function($data){                    return "<button class=\"btn btn-primary\" type=\"button\" onclick='urlIframe(\"".route('system.loyalty-wallet.transactions.show',$data->id)."\")'><i class=\"ft-eye\"></i></button>";                })                ->make(true);        }else{            $this->viewData['breadcrumb'] = [                [                    'text'=> __('Home'),                    'url'=> url('system'),                ],                [                    'text'=> __('Loyalty Wallet'),                    'url'=> route('system.loyalty-wallet.index'),                ],                [                    'text'=> getWalletOwnerName($wallet,$this->systemLang),                ]            ];            $this->viewData['pageTitle'] = __('Show Loyalty Wallet #ID:').' '.$wallet->id;            $this->viewData['result'] = $wallet;            $this->viewData['walletModelType'] = LoyaltyWalletData::$modelType;            $this->viewData['info'] = [                'diffBetweenModelsType'=> array_chunk(LoyaltyWalletData::diffBetweenModelsType($wallet->id),2,true),                'diffBetweenStatusType'=> array_chunk(LoyaltyWalletData::diffBetweenStatusType($wallet->id),2,true)            ];            return $this->view('loyalty-wallet.show',$this->viewData);        }    }    public function transferMoneyMainWallets(Request $request){        // Main View Vars        $this->viewData['breadcrumb'][] = [            'text'=> __('Main Wallet'),            'url'=> route('system.wallet.main-wallets')        ];        $this->viewData['breadcrumb'][] = [            'text'=> __('Transfer Money'),        ];        $this->viewData['pageTitle'] =  __('Transfer Money');        // ----- Wallet        $this->viewData['postRoute'] = 'system.wallet.transfer-money-main-wallets.post';        $this->viewData['walletIN']  = MainWallets::where('transfer_in','yes')->get(['id','name']);        $this->viewData['walletOUT'] = MainWallets::where('transfer_out','yes')->get(['id','name']);        $this->viewData['sendTo']    = array_column(Staff::join('permission_groups','permission_groups.id','=','staff.permission_group_id')            ->where('permission_groups.is_supervisor','=','yes')            ->get([                'staff.id',                \DB::raw('CONCAT("#ID:",staff.id," ",staff.firstname," ",staff.lastname) as `name`')            ])->toArray(),'name','id');        // ----- Wallet        return $this->view('wallet.transfer-money-main-wallets',$this->viewData);    }    public function transferMoneyMainWalletsPost(transferMoneyMainWalletsFormRequest $request){        if($request->transfer_type == 'transfer_in'){            WalletData::makeTransactionWithoutModel(true);            WalletData::makeTransactionWithoutBalance(true);            $transfer = WalletData::makeTransaction(                $request->amount_in,                'wallet',                'main_wallets',                setting('main_wallet_id'),                'main_wallets',                $request->main_wallet_id,                null,                null,                'paid'            );        }else{            WalletData::makeTransactionWithoutModel(true);            $transfer = WalletData::makeTransaction(                $request->amount_out,                'wallet',                'main_wallets',                $request->main_wallet_id,                'staff',                $request->send_to,                null,                null,                'paid'            );        }        return  back()->with('transactionStatus',$transfer);    }    /**     * Display the specified resource.     *     * @param  \App\User  $user     * @return \Illuminate\Http\Response     */    public function transactions(Request $request){        if($request->isDataTable){            $eloquentData = WalletTransaction::with(['fromWallet','toWallet','model'])                ->leftJoin('wallet as w_from','w_from.id','=','transactions.from_id')                ->leftJoin('wallet as w_to','w_to.id','=','transactions.to_id')                ->select(['transactions.id','transactions.*']);            if($request->withTrashed){                $eloquentData->onlyTrashed();            }            /*             * Start handling filter             */            whereBetween($eloquentData,'created_at',$request->created_at1,$request->created_at2);            if($request->id){                $eloquentData->where('id', '=',$request->id);            }            if($request->model_type){                $eloquentData->where('model_type',WalletData::getModelTypeByModel($request->model_type));            }            if($request->model_id){                $eloquentData->where('model_id',$request->model_id);            }            if($request->type){                $eloquentData->where('type',$request->type);            }            if($request->status){                $eloquentData->where('status',$request->status);            }            if($request->from_type){                $eloquentData->where('w_from.model_type',WalletData::getModelTypeByModel($request->from_type));            }            if($request->from_id){                $eloquentData->where('w_from.model_id',$request->from_id);            }            if($request->to_type){                $eloquentData->where('w_to.model_type',WalletData::getModelTypeByModel($request->to_type));            }            if($request->to_id){                $eloquentData->where('w_to.model_id',$request->to_id);            }            if($request->amount){                whereBetween($eloquentData,'amount',$request->amount1,$request->amount2);            }            $systemLang = $this->systemLang;            return Datatables::eloquent($eloquentData)                ->addColumn('details',function($data){                    return ' ';                })                ->addColumn('id','{{$id}}')                ->addColumn('model_id',function($data){                    if(!$data->model){                        return '--';                    }else{                        return WalletData::getModelTypeByModel($data->model_type) . ' ('.$data->model_id.') ';                    }                })                ->addColumn('amount',function($data){                    return number_format($data->amount).' '.__('LE');                })                ->addColumn('created_at',function($data){                    return $data->created_at->diffForHumans();                })                ->addColumn('type', function($data){                    return __($data->type);                })                ->addColumn('status', function($data){                    return __($data->status);                })                ->addColumn('action',function($data){                    return "<button class=\"btn btn-primary\" type=\"button\" onclick='urlIframe(\"".route('system.wallet.transactions.show',$data->id)."\")'><i class=\"ft-eye\"></i></button>";                })                ->make(true);        }else{            // View Data            $this->viewData['tableColumns'] = [                '#',                __('ID'),                __('Model'),                __('Amount'),                __('Created At'),                __('Type'),                __('Status'),                __('Action')            ];            $this->viewData['breadcrumb'][] = [                'text'=> __('Wallets'),                'url'=> route('system.wallet.index')            ];            $this->viewData['breadcrumb'][] = [                'text'=> __('Transactions')            ];            $this->viewData['pageTitle'] = __('Transactions');            $this->viewData['walletUserType'] = WalletData::$userType;            $this->viewData['walletModelType'] = WalletData::$modelType;            return $this->view('wallet.transactions',$this->viewData);        }    }    public function transactionShow($ID){        $data = WalletTransaction::findOrFail($ID);        $this->viewData['breadcrumb'][] = [            'text'=> __('Wallets'),            'url'=> route('system.wallet.index')        ];        $this->viewData['breadcrumb'][] = [            'text'=> __('Transactions'),            'url'=> route('system.wallet.transactions')        ];        $this->viewData['breadcrumb'][] = [            'text'=> __('Transaction #ID:').$data->id,        ];        $this->viewData['pageTitle'] = __('Transaction #ID:').$data->id;        $this->viewData['result'] = $data;        $this->viewData['WalletData'] = WalletData::class;        return $this->view('wallet.transactionShow',$this->viewData);    }}